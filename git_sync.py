import os
import subprocess
import datetime

# Configura√ß√£o do nome do reposit√≥rio (opcional)
REPO_DIR = os.path.dirname(os.path.abspath(__file__))  # Obt√©m o diret√≥rio atual
COMMIT_MESSAGE = f"Auto-update: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"  # Mensagem com timestamp

def run_git_command(command):
    """Executa um comando Git e retorna a sa√≠da."""
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Erro ao executar comando: {command}")
        print(result.stderr)
    return result.stdout

def sync_repository():
    """Sincroniza o reposit√≥rio local com o remoto no GitHub."""
    os.chdir(REPO_DIR)  # Garante que estamos no diret√≥rio correto

    # Verifica se h√° altera√ß√µes no reposit√≥rio
    status = run_git_command("git status --porcelain")
    
    if status.strip():
        print("üîÑ Altera√ß√µes detectadas. Commitando...")
        run_git_command("git add .")
        run_git_command(f'git commit -m "{COMMIT_MESSAGE}"')
    else:
        print("‚úÖ Nenhuma altera√ß√£o detectada. Reposit√≥rio j√° est√° atualizado.")

    # Faz pull para garantir que o reposit√≥rio local est√° atualizado
    print("‚¨áÔ∏è  Fazendo pull das √∫ltimas altera√ß√µes...")
    run_git_command("git pull origin main --rebase")

    # Faz push para enviar as altera√ß√µes para o GitHub
    print("‚¨ÜÔ∏è  Enviando altera√ß√µes para o GitHub...")
    run_git_command("git push origin main")

    print("üöÄ Reposit√≥rio sincronizado com sucesso!")

if __name__ == "__main__":
    sync_repository()
